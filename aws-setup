#!/usr/bin/env python
# 2013 Angelo Olivera <aolivera@gmail.com>
#
# aws-setup
# - generate an SSH keypair if needed
# - create a VPC (specified in the command-line)
# - create a subnet (half the size of the VPC)
# - create and attach an internet gateway to vpc
# - create controller and compute instances
# - create and attach elastic ip to controller

import sys, os, time, shutil
from boto.vpc import VPCConnection
from optparse import OptionParser
import traceback

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    RED = '\033[00;31m'
    GREEN='\033[00;32m'
    YELLOW='\033[00;33m'

    def disable(self):
        self.HEADER = ''
        self.OKBLUE = ''
        self.OKGREEN = ''
        self.WARNING = ''
        self.FAIL = ''
        self.ENDC = ''

def error(msg, exit=1):
    print bcolors.RED + sys.argv[0] + ": " + msg + bcolors.ENDC
    sys.exit(exit)

def warn(msg):
    print bcolors.YELLOW + sys.argv[0] + ": " + msg + bcolors.ENDC

def info(msg):
    print bcolors.GREEN + sys.argv[0] + ": " + msg + bcolors.ENDC

def msg(msg):
    print msg

def awserror(reason, exit=10):
    error("Could not " + reason + ". Check AWS Console: https://console.aws.amazon.com/vpc/")
    sys.exit(exit)

def check_key_pair(connection, key):
    return any("KeyPair:"+key in str(s) for s in connection.get_all_key_pairs())

def check_vpc(connection, vpc_ip):
    for v in connection.get_all_vpcs():
        if v.cidr_block == vpc_ip:
            return v

def check_subnet(connection, vpc, subnet_ip):
    for s in connection.get_all_subnets():
        if s.vpc_id == vpc.id:
            if s.cidr_block == subnet_ip:
                return s

def check_igw(connection, vpc):
    for g in connection.get_all_internet_gateways():
        for a in g.attachments:
            if a.vpc_id == vpc.id:
                return g

def check_free_igw(connection, vpc):
    has_attachment = False
    for g in connection.get_all_internet_gateways():
        if len(g.attachments)==0:
            # igw is free, let's use it
            return g

def find_routing_table(connection, vpc):
    for rt in connection.get_all_route_tables():
        if rt.vpc_id == vpc.id:
            return rt

def check_default_route(connection, vpc, rt):
    for r in rt.routes:
        if r.destination_cidr_block == '0.0.0.0/0':
            return True
    return False

def find_security_group(connection, vpc):
    for sg in connection.get_all_security_groups():
        if sg.vpc_id == vpc.id:
            return sg

def find_elastic_ip(connection):
    for ip in connection.get_all_addresses():
        if ip.domain == "vpc":
            if not ip.association_id:
                return ip

def attach_ip(connection, instance_id, ip, wait):
    attached = False
    while not attached:
        try:
            attached = connection.associate_address(instance_id, None, ip.allocation_id)
        except:
            sys.stdout.write('.')
            sys.stdout.flush()
            time.sleep(2)
            wait -= 2
            if wait == 0:
                sys.stdout.write('\n')
                error(traceback.format_exc().split('\n')[-2])
                break
    sys.stdout.write('\n')
    sys.stdout.flush()
    return attached

def main():

    parser = OptionParser(usage="usage: %prog [options] testbed")

    parser.add_option("-s", "--subnet", dest="subnet", default="10.0.0.0/24", metavar="SUBNET",
                        help="subnet to use for Amazon VPC, in CIDR notation  "
                        '       default: "10.0.0.0/24"')

    parser.add_option("-k", "--key", dest="ssh_key", default="openstack", metavar="KEY",
                        help="name of ssh key. it will be created if not nonexistent    "
                        '       default: "openstack"' )

    parser.add_option("-f", "--flavor", dest="flavor", default="m1.medium", metavar="FLAVOR",
                        help="instance type: t1.micro, m1.small, m3.xlarge, etc. "
                        '       default: "m1.medium"' )

    parser.add_option("-n", "--instances", dest="instances", default=2, metavar="INSTANCES",
                        help="number of instances to spawn.                 "
                        "       if set to 1, a single node setup will be used."
                        "       default: 2")

    parser.add_option("-y", "--yes", action="store_true", dest="yes", default=False,
                        help="answer yes to all questions              ")

    (options, args) = parser.parse_args()

    if len(args) != 1:
        parser.print_usage()
        sys.exit(1)

    # global variables
    testbed_name = args[0]
    vpc_ip = options.subnet
    desc_file = testbed_name + "/" + testbed_name + ".desc"
    answer = "yes"

    info("Testbed name: " + testbed_name)
    info("Subnet: " + options.subnet)
    info("SSH key: " + options.ssh_key)
    info("Flavor: " + options.flavor)
    info("Number of instances: " + str(options.instances) + "\n")

    out = "name={}\nsubnet={}\nssh_key={}\nflavor={}\ninstances={}\n"\
            .format(testbed_name, options.subnet, options.ssh_key, options.flavor, options.instances)

    if not os.path.isdir(testbed_name):
        os.mkdir(testbed_name)

    f = open(desc_file, 'w')
    f.write(out)
    if not options.yes:
        answer = raw_input("Continue? Y/n")
        if answer.lower() == "n" or answer.lower() == "no":
            warn("Cancelling...")
            sys.exit(0)
    # Set VPC IP and CIDR subnet from command line
    vpc_base = vpc_ip[:vpc_ip.rfind('/')]
    vpc_size = vpc_ip[vpc_ip.rfind('/')+1:]

    # Create connection with AWS
    try:
        c = VPCConnection(os.environ['AWS_ACCESS_KEY'], os.environ['AWS_SECRET_KEY'])
    except:
        error("Could not find AWS credentials. Please set environment variables AWS_ACCESS_KEY and AWS_SECRET_KEY.")

    # Check if key exists, otherwise create one
    filename = options.ssh_key + ".pem"
    keyfile = testbed_name + "/" + filename
    if check_key_pair(c, options.ssh_key):
        info("SSH key found in AWS: '{}'.".format(options.ssh_key))
        for path in [".", "keys"]:
            cur_f = path + "/" + filename
            if os.path.exists(cur_f):
                shutil.copyfile(cur_f, keyfile)
                os.chmod(keyfile, 0600)
                warn("Copied key: " + keyfile)
    else:
        warn("SSH key not found in AWS: '{}'. Creating one...".format(options.ssh_key))
        try:
            kp = c.create_key_pair(options.ssh_key)
        except:
            print traceback.format_exc().split('\n')[-2]
            error("Could not generate SSH keypair in AWS.")
        try:
            kf = open(keyfile, 'w')
            kf.write(kp.material)
            kf.close()
            os.chmod(keyfile, 0600)
        except:
            error("Could not write or change permissions of key: " + keyfile)
        warn("SSH key saved: {}".format(keyfile))

    # Check if there's already a VPC using the specified subnet
    vpc = check_vpc(c, vpc_ip)
    if vpc:
        info("Found VPC".format(vpc_ip))
        info("ID: " + vpc.id)
        info("Region: " + vpc.region.name)
        f.write("vpc.id=" + vpc.id + "\n")
        f.write("vpc.region.name=" + vpc.region.name + "\n")
        answer = "y"
        if not options.yes:
            answer = raw_input("\nOK to reuse it? Y/n ")

    if not vpc or answer.lower() == "n" or answer.lower() == "no":
        try:
            # VPC doesn't exist or user chose not to reuse, create one
            vpc = c.create_vpc(vpc_ip)
            info("Created VPC: " + vpc.id)
        except Exception, e:
            print traceback.format_exc().split('\n')[-2]
            awserror("create VPC")
            error( "".join(e[2]))

    # Check if subnet exists
    subnet_ip=str(vpc_base) + '/' + str(int(vpc_size))
    subnet = check_subnet(c, vpc, subnet_ip)
    if subnet:
        warn("Reusing existing subnet: {}".format(subnet.id))
    else:
        try:
            # Subnet doesn't exist, create one
            subnet = c.create_subnet(vpc.id, subnet_ip)
            info("Created subnet: " + subnet.cidr_block)
            f.write("subnet={}\n".format(subnet.cidr_block))
        except Exception, e:
            print traceback.format_exc().split('\n')[-2]
            awserror("create subnet")
            error( "".join(e[2]))

    # Check if Internet Gateway exists for VPC
    igw = check_igw(c, vpc)
    if igw:
        warn("Found internet gateway for VPC: {}".format(igw.id))
    else:
        # Check if there is a free igw and if so, attach vpc
        igw = check_free_igw(c, vpc)
        if igw:
            try:
                attachment = c.attach_internet_gateway(igw.id, vpc.id)
                info("Found free internet gateway, attaching to vpc: " + igw.id)
            except Exception, e:
                awserror("attach internet gateway")
                error( "".join(e[2]))
        else:
            try:
                # Try to create a new igw
                igw = c.create_internet_gateway()
                info("Created internet gateway: " + igw.id)
                attachment = c.attach_internet_gateway(igw.id, vpc.id)
                info("Attached igw to vpc")
            except Exception, e:
                # Couldn't find unused igw nor create a new one, exit
                awserror("create or attach internet gateway")
                error( "".join(e[2]))
        f.write("internet_gateway={}\n".format(igw.id))

    # No error checking, assume it exists since it is created with each VPC
    routing_table = find_routing_table(c, vpc)
    info("Using routing table: " + routing_table.id)
    f.write("routing_table={}\n".format(routing_table.id))

    # Create default route (via the internet gateway) if it doesn't exist already
    if check_default_route(c, vpc, routing_table):
        warn("Found default route")
    else:
        route = c.create_route(routing_table.id, "0.0.0.0/0", igw.id)
        info("Added default route")

    # Allow all incoming tcp connections
    # FIXME: only allow known ports (ssh, apache/horizon, etc)
    sg = find_security_group(c, vpc)
    info("Using security group: " + sg.id)
    f.write("security_group={}\n".format(sg.id))
    if sg:
        try:
            info("Allowing incoming TCP connections")
            c.authorize_security_group(None, None, None, "tcp", 0, 65535, "0.0.0.0/0", sg.id)
            info("Allowing incoming UDP connections")
            c.authorize_security_group(None, None, None, "udp", 0, 65535, "0.0.0.0/0", sg.id)
            info("Allowing incoming ICMP connections")
            c.authorize_security_group(None, None, None, "icmp", -1, -1, "0.0.0.0/0", sg.id)
        except:
            warn("Found firewall rules in security group: " + sg.id + ". Skipping")

    # Allocate or reuse elastic ip
    ip = find_elastic_ip(c)
    if ip:
        warn("Found free Elastic IP: {}".format(ip.public_ip))
        answer = "y"
        if not options.yes:
            answer = raw_input("\nOK to reuse it? Y/n ")
    if not ip or answer.lower() == "n" or answer.lower() == "no":
        try:
            ip = c.allocate_address("vpc")
        except:
            print traceback.format_exc().split('\n')[-2]
            error("Could not allocate Elastic IP")
        info("Allocated Elastic IP: {}".format(ip.public_ip))

    # Run instances in VPC
    ec2 = {} # dictionary of instances
    if options.instances >= 2: # TODO: single-node setup
        try:
            ec2[0] = c.run_instances('ami-3d4ff254', subnet_id=subnet.id, key_name=options.ssh_key, instance_type=options.flavor)
        except:
            print traceback.format_exc().split('\n')[-2]
            error("Could not create controller instance.")

        # run_instances returns a boto.ec2.instance.Reservation class, let's
        # take the first instance object
        controller = ec2[0].instances[0]

        info("Created controller instance: {}".format(controller.id))
        time.sleep(2)
        f.write("controller.id={}\n".format(controller.id))
        f.write("controller.private_ip={}\n".format(controller.private_ip_address))

        # Disable source/destination checking so that controller can be
        # used as NAT router (due to scarcity of Elastic IPs)
        controller.modify_attribute("sourceDestCheck", "false")
        info("Disabled source/destination check for controller instance")

        # Create a name tag for controller
        tags = {}
        tags["Name"] = testbed_name + "-controller"
        c.create_tags([controller.id], tags)

        for node in xrange(1, int(options.instances)):
            try:
                ec2[node] = c.run_instances('ami-3d4ff254', subnet_id=subnet.id, key_name=options.ssh_key, instance_type=options.flavor)
            except:
                print traceback.format_exc().split('\n')[-2]
                error("Could not create compute{} instance".format(node))
            compute = ec2[node].instances[0]
            info("Created compute{} instance: {}".format(node, compute.id))
            time.sleep(2)
            f.write("compute{}.id={}\n".format(node, compute.id))
            f.write("compute{}.private_ip={} \n".format(node, compute.private_ip_address))

            # Create name tags for nodes
            tags["Name"] = testbed_name + "-compute" + str(node)
            c.create_tags([compute.id], tags)

        # Attach elastic ip to controller
        warn("Waiting for controller to spawn to attach IP")
        if not attach_ip(c, ec2[0].instances[0].id, ip, 120):
            error("Timeout reached while trying to attach Elastic IP. Aborting.")
        info("Attached Elastic IP")
        f.write("elastic_ip={}\n".format(ip.public_ip))

    info("Wrote description file: " + desc_file)

    f.close()

if __name__ == "__main__":
    main()

