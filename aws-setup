#!/usr/bin/env python
# 2013 Angelo Olivera <aolivera@gmail.com>
#
# aws-setup
# - generate an SSH keypair if needed
# - create a VPC (specified in the command-line)
# - create a subnet (half the size of the VPC)
# - create and attach an internet gateway to vpc
# - create controller and compute instances
# - create and attach elastic ip to controller

import sys, os, time
from boto.vpc import VPCConnection
from optparse import OptionParser
import traceback

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    RED = '\033[00;31m'
    GREEN='\033[00;32m'
    YELLOW='\033[00;33m'

    def disable(self):
        self.HEADER = ''
        self.OKBLUE = ''
        self.OKGREEN = ''
        self.WARNING = ''
        self.FAIL = ''
        self.ENDC = ''

def error(msg):
    print bcolors.RED + msg + bcolors.ENDC

def warn(msg):
    print bcolors.YELLOW + msg + bcolors.ENDC

def info(msg):
    print bcolors.GREEN + msg + bcolors.ENDC

def msg(msg):
    print msg

def vpc_info(vpc):
    info("vpc id:   " + vpc.id)
    info("cidr: " + vpc.cidr_block)
    info("region: "+ vpc.region.name)

def awserror(reason, exit=10):
    error("Could not " + reason + ". Check AWS Console: https://console.aws.amazon.com/vpc/")
    sys.exit(exit)

def check_key_pair(connection, key):
    return any("KeyPair:"+key in str(s) for s in connection.get_all_key_pairs())

def check_vpc(connection, vpc_ip):
    for v in connection.get_all_vpcs():
        if v.cidr_block == vpc_ip:
            return v

def check_subnet(connection, vpc, subnet_ip):
    for s in connection.get_all_subnets():
        if s.vpc_id == vpc.id:
            if s.cidr_block == subnet_ip:
                return s

def check_igw(connection, vpc):
    for g in connection.get_all_internet_gateways():
        for a in g.attachments:
            if a.vpc_id == vpc.id:
                return g

def check_free_igw(connection, vpc):
    has_attachment = False
    for g in connection.get_all_internet_gateways():
        if len(g.attachments)==0:
            # igw is free, let's use it
            return g

def find_routing_table(connection, vpc):
    for rt in connection.get_all_route_tables():
        if rt.vpc_id == vpc.id:
            return rt

def check_default_route(connection, vpc, rt):
    for r in rt.routes:
        if r.destination_cidr_block == '0.0.0.0/0':
            return True
    return False

def find_security_group(connection, vpc):
    for sg in connection.get_all_security_groups():
        if sg.vpc_id == vpc.id:
            return sg

def find_elastic_ip(connection):
    for ip in connection.get_all_addresses():
        if ip.domain == "vpc":
            if not ip.association_id:
                return ip

def attach_ip(connection, instance_id, ip, wait):
    attached = False
    while not attached:
        try:
            attached = connection.associate_address(instance_id, None, ip.allocation_id)
        except:
            sys.stdout.write('.')
            sys.stdout.flush()
            time.sleep(2)
            wait -= 2
            if wait == 0:
                sys.stdout.write('\n')
                error(traceback.format_exc().split('\n')[-2])
                break
    sys.stdout.write('\n')
    sys.stdout.flush()
    return attached

def main():

    parser = OptionParser()
    parser.add_option("-s", "--subnet", dest="subnet", default="10.0.0.0/24", metavar="SUBNET", 
                        help="subnet to use for Amazon VPC, in CIDR notation  "
                        "       default: 10.0.0.0/24")

    parser.add_option("-n", "--instances", dest="instances", default=2, metavar="INSTANCES",
                        help="number of instances to spawn.                 "
                        "       if set to 1, a single node setup will be used."
                        "       default: 2")

    parser.add_option("-k", "--key", dest="ssh_key", default="openstack", metavar="KEY",
                        help="name of ssh key to use (it has to exist in EC2) "
                        "       default: openstack" )

    parser.add_option("-f", "--flavor", dest="flavor", default="t1.micro", metavar="FLAVOR",
                        help="instance type: t1.micro, m1.medium, m3.xlarge, etc. "
                        "       default: t1.micro" )

    (options, args) = parser.parse_args()

    vpc_ip = options.subnet

    info("{}:\n"
        "       subnet:     {}\n"
        "       ssh key:    {}\n"
        "       instances:  {}\n"
        "       flavor:     {}\n"
        .format(sys.argv[0][2:], options.subnet, options.ssh_key, options.instances, options.flavor))

    answer = raw_input("Continue? Y/n")
    if answer.lower() == "n" or answer.lower() == "no":
        warn("Cancelling...")
        sys.exit(0)

    # Set VPC IP and CIDR subnet from command line
    vpc_base = vpc_ip[:vpc_ip.rfind('/')]
    vpc_size = vpc_ip[vpc_ip.rfind('/')+1:]

    # Create connection with AWS
    try:
        c = VPCConnection(os.environ['AWS_ACCESS_KEY'], os.environ['AWS_SECRET_KEY'])
    except:
        error("Could not find AWS credentials. Please set environment variables AWS_ACCESS_KEY and AWS_SECRET_KEY.")
        sys.exit(1)
        
    # Check if key exists
    if check_key_pair(c, options.ssh_key):
        info("SSH key found in AWS: '{}'.".format(options.ssh_key))
    else:
        warn("SSH key not found in AWS: '{}'. Creating one...".format(options.ssh_key))
        try:
            kp = c.create_key_pair(options.ssh_key)
        except:
            error("Could not generate SSH keypair in AWS.")
            print traceback.format_exc().split('\n')[-2]
            sys.exit(1)
        filename = options.ssh_key + ".pub"
        try:
            f = open(filename, 'w')
            f.write(kp.material)
            f.close()
        except:
            error("Could not write SSH key to {}/{}".format(os.getcwd(), options.ssh_key))
            sys.exit(1)
        warn("SSH key saved in current directory: {}/{}.pub".format(os.getcwd(), options.ssh_key))

    # Check if there's already a VPC using the specified subnet
    vpc = check_vpc(c, vpc_ip)
    if vpc:
        info("Found VPC".format(vpc_ip))
        vpc_info(vpc)
        answer = raw_input("OK to reuse it? Y/n ")
    if not vpc or answer.lower() == "n" or answer.lower() == "no":
        try:
            # VPC doesn't exist or user chose not to reuse, create one
            vpc = c.create_vpc(vpc_ip)
            info("Created VPC: " + vpc.id)
        except Exception, e:
            error( "".join(e[2]))
            awserror("create VPC")

    # Check if subnet exists
    subnet_ip=str(vpc_base) + '/' + str(int(vpc_size)+1)
    subnet = check_subnet(c, vpc, subnet_ip)
    if subnet:
        warn("Reusing existing subnet: {}".format(subnet.id))
    else: 
        try:
            # Subnet doesn't exist, create one
            subnet = c.create_subnet(vpc.id, subnet_ip)
            info("Created subnet: " + subnet.cidr_block)
        except Exception, e:
            error( "".join(e[2]))
            awserror("create subnet")

    # Check if Internet Gateway exists for VPC
    igw = check_igw(c, vpc)
    if igw:
        warn("Found internet gateway for VPC: {}".format(igw.id))
    else:
        # Check if there is a free igw and if so, attach vpc
        igw = check_free_igw(c, vpc)
        if igw:
            try:
                attachment = c.attach_internet_gateway(igw.id, vpc.id)
                info("Found free internet gateway, attaching to vpc: " + igw.id)
            except Exception, e:
                error( "".join(e[2]))
                awserror("attach internet gateway")
        else:
            try:
                # Try to create a new igw
                igw = c.create_internet_gateway()
                info("Created internet gateway: " + igw.id)
                attachment = c.attach_internet_gateway(igw.id, vpc.id)
                info("Attached igw to vpc: " + str(attachment))
            except Exception, e:
                # Couldn't find unused igw nor create a new one, exit
                error( "".join(e[2]))
                awserror("create or attach internet gateway")

    # No error checking, assume it exists since it is created with each VPC
    routing_table = find_routing_table(c, vpc)

    # Create default route (via the internet gateway) if it doesn't exist already
    if check_default_route(c, vpc, routing_table):
        warn("Found default route")
    else:
        route = c.create_route(routing_table.id, "0.0.0.0/0", igw.id)
        info("Added default route")
        
    # Allow all incoming tcp connections
    # FIXME: only allow known ports (ssh, apache/horizon, etc)
    sg = find_security_group(c, vpc)
    if sg:
        try:
            sg.authorize('tcp', 0, 65535, '0.0.0.0/0', )
            info("Allowing incoming TCP connections")
            sg.authorize('udp', 0, 65535, '0.0.0.0/0', )
            info("Allowing incoming UDP connections")
            sg.authorize('icmp', -1, -1, '0.0.0.0/0', )
            info("Allowing incoming ICMP connections")
        except:
            warn("Found firewall rules in security group: " + sg.id + ". Skipping")

    # Run instances in VPC
    ec2 = {} # dictionary of instances
    if options.instances >= 2:
        try:
            ec2[0] = c.run_instances('ami-3d4ff254', subnet_id=subnet.id, key_name=options.ssh_key, instance_type=options.flavor)
        except:
            error("Could not create controller instance.")
            print traceback.format_exc().split('\n')[-2]
            sys.exit(1)
        info("Created controller instance: {}".format(ec2[0].instances[0].id))
        
        for node in xrange(1, int(options.instances)):
            try:
                ec2[node] = c.run_instances('ami-3d4ff254', subnet_id=subnet.id, key_name=options.ssh_key, instance_type=options.flavor)
            except:
                error("Could not create compute{} instance".format(node))
                print traceback.format_exc().split('\n')[-2]
                sys.exit(1)
            info("Created compute{} instance: {}".format(node, ec2[node].instances[0].id))

        ip = find_elastic_ip(c)
        if ip:
            warn("Found free Elastic IP: {}".format(ip.public_ip))
            answer = raw_input("OK to reuse it? Y/n ")
        if not ip or answer.lower() == "n" or answer.lower() == "no":
            try:
                ip = c.allocate_address("vpc")
            except:
                error("Could not allocate new Elastic IP")
                print traceback.format_exc().split('\n')[-2] 
                sys.exit(1)
            warn("Allocated Elastic IP: {}".format(ip.public_ip))

        warn("Waiting for controller to spawn to attach IP")
        if not attach_ip(c, ec2[0].instances[0].id, ip, 120):
            error("Timeout reached while trying to attach Elastic IP. Aborting.")
        info("Attached Elastic IP")
                    
if __name__ == "__main__":
    main()

