#!/bin/bash
# 2013 Angelo Olivera <aolivera@gmail.com>
#
# Automatic deployment of OpenStack nodes using Puppet
#
# Supported distributions: Ubuntu 12.04/12.10

# Color escape codes
RESTORE='\033[0m'
RED='\033[00;31m'
GREEN='\033[00;32m'
YELLOW='\033[00;33m'

msg() {
    case "$1" in
        error)  echo -ne "$RED"                 >&2
                echo "$0@$hostname: ${@:2}"     >&2
                ;;
        warn)   echo -ne "$YELLOW"              >&2
                echo "$0@$hostname: ${@:2}"     >&2
                ;;
        *)      echo -ne "$GREEN"
                echo "$0@$hostname: ${@}"
    esac

    # restore normal colors
    echo -ne "$restore"
    echo -ne "$restore"    >&2
}

usage() {
    exec 5>&1
    exec 1>&2
    echo "Usage: $0 [options] CONTROLLER_HOSTNAME CONTROLLER_IP"
    echo ""
    echo "Options:"
    echo "-h HOSTNAME, --hostname HOSTNAME"
    echo "                      Node hostname"
    echo "                      default: CONTROLLER_HOSTNAME (assume this is the controller)"
    echo "-e IP, --elastic IP"
    echo "                      Public IP address for node"
    echo "                      default: address from eth0"
    echo "-l LOGFILE, --logfile LOGFILE"
    echo "                      Write progress to LOGFILE"
    echo "                      default: HOSTNAME.log"
    echo ""
    echo "Example:"
    echo "$0 -h vpc-compute2.ec2.local --logfile /tmp/compute2.log vpc-controller.ec2.local 10.0.0.64"
    echo ""
    exec 1>&5
}

installpkg() {
    if ! dpkg -s $1 &>/dev/null; then
        msg "Installing: $1"
        runcmd aptitude -y install $@
    fi
}

runcmd() {
    if [[ -n $options_verbose ]]; then
        "$@" | tee -a $options_logfile
    else
        "$@" &>> $options_logfile
    fi
}

sethostname() {
    hostname="$1"
    [[ $(hostname) == $hostname ]] && return 0
    msg "Setting hostname: $hostname"
    hostname $hostname
    echo $(hostname) > /etc/hostname
    grep -q $hostname /etc/hosts && return 0
    if grep -q 127.0.0.1 /etc/hosts; then
        sed -ie "s/127.0.0.1.*/& $hostname/" /etc/hosts
    else
        echo "127.0.0.1 localhost $hostname" >> /etc/hosts
    fi
}

install_puppet_modules() {
    oldcwd=$PWD

    # openstack modules from puppet forge
    modules=/etc/puppet/modules
    if [ ! -e $modules/openstack ]; then
        msg "Installing: OpenStack Puppet modules"
        runcmd puppet module install puppetlabs-openstack
    fi

    # install/upgrade modules from git repositories
    if [ ! -L $modules/openstack ]; then
        runcmd mkdir -p /root/{src,backup}; cd /root/src
        for service in mysql openstack keystone nova glance cinder horizon; do
            runcmd git clone git://github.com/puppetlabs/puppetlabs-$service.git
            runcmd rm -rf /root/backup/$service
            runcmd mv -f /etc/puppet/modules/$service /root/backup
            runcmd ln -svf $PWD/puppetlabs-$service /etc/puppet/modules/$service
        done
        runcmd chmod -R a+rX /root/src
        runcmd chmod a+x /root
        cd - >/dev/null
    else
        cd /root/src
        for service in mysql openstack keystone nova glance cinder horizon; do
            cd puppetlabs-$service
            runcmd git pull
            cd - >/dev/null
        done
    fi

    cd $oldcwd
}

configure_puppet() {
    master=$1
    conf=/etc/puppet/puppet.conf
    if ! grep -q $master $conf; then
        if ! dpkg -s puppet &>/dev/null; then
            msg error "Puppet not installed?"
            exit 1
        fi
        msg "Configuring: Puppet agent"
        echo -e "\n[agent]\nserver = $master\n" >> $conf
    fi
}

add_puppet_repo() {
    if ! dpkg -s puppetlabs-release &>/dev/null; then
        msg "Adding repository: PuppetLabs"
        runcmd wget -nc -P /tmp http://apt.puppetlabs.com/puppetlabs-release-precise.deb
        runcmd dpkg -i /tmp/puppetlabs-release-precise.deb
    fi
}

add_cloud_repo() {
    installpkg ubuntu-cloud-keyring
    conf=/etc/apt/sources.list.d/ubuntu-cloud.list
    if [ ! -f $conf ]; then
        msg "Adding repository: Ubuntu Cloud"
        echo "deb http://ubuntu-cloud.archive.canonical.com/ubuntu precise-updates/folsom main" > $conf
    fi
}

configure_puppetmaster() {
    controller_hostname="$1"
    elastic_ip="$2"

    if [ -f site.pp ]; then
        msg "Configuring: Puppet server"
        cp site.pp /etc/puppet/manifests
        chown puppet:puppet /etc/puppet/manifests/site.pp
    else
        msg "Configuring: Puppet server (generic manifest)"
        mkdir -p /etc/puppet/manifests
        curl https://raw.github.com/redondos/puppet-openstack-configure/master/site.pp > /etc/puppet/manifests/site.pp
    fi

    # configure puppet-openstack
    sed -ie 's/^$controller_node_address.*/$controller_node_address = '"'$controller_hostname'/" /etc/puppet/manifests/site.pp
    sed -ie "s/^\$private_interface.*/\$private_interface = 'eth0'/" /etc/puppet/manifests/site.pp
    if [[ -n $controller_public_ip ]]; then
        sed -ie "s/^\(\$controller_node_public.*\)\$controller_node_address/\1'${controller_public_ip}'/" /etc/puppet/manifests/site.pp
    fi

    # enable autosigning (only works for FQDNs)
    echo -e '*.local\n*.internal' > /etc/puppet/autosign.conf
}

if ((UID!=0)); then
    msg error "This script needs to be run as root"
    exit 1
fi

# parse command-line options
ARGS=$(getopt -o "l:h:e:v" -l "logfile:,hostname:,elastic:,verbose" -n "$0" -- "$@")

if [ $? != 0 ] ; then
    msg error "error parsing command-line options"
    exit 1
fi

eval set -- "$ARGS"

while true; do
    case "$1" in
        -l|--logfile)
            options_logfile="$2"
            shift 2;;
        -h|--hostname)
            options_hostname="$2"
            shift 2;;
        -e|--elastic)
            options_elastic_ip="$2"
            shift 2;;
        -v|--verbose)
            options_verbose=1
            set -x
            shift;;
        --)
            shift
            break;;
        *)
            msg error "invalid command-line option: $1"
            break;;
    esac
done

# check for controller host/ip command-line arguments
if (($#!=2)); then
    usage
    exit 1
fi
controller_hostname=$1
controller_ip=$2

# if hostname hasn't been specified, assume controller instance
if [[ -z $options_hostname ]]; then
    options_hostname=$controller_hostname
    hostname=$options_hostname
    msg "Node hostname not specified (--hostname). Assuming this is the controller."
fi
hostname=$options_hostname

# by default log to HOSTNAME.log
if [[ -z $options_logfile ]]; then
    options_logfile=${options_hostname}.log
fi
msg "Logfile: $options_logfile"
rm -f "$options_logfile"
touch "$options_logfile"

# set hostname and make sure we have an address for the controller
runcmd sethostname $hostname
grep -q $controller_hostname /etc/hosts || echo "$controller_ip $controller_hostname" >> /etc/hosts

# updated puppet/openstack packages
add_puppet_repo
add_cloud_repo

# install/configure packages
runcmd aptitude update
installpkg git
installpkg puppet
install_puppet_modules
configure_puppet $controller_hostname
if [[ $hostname == $controller_hostname ]]; then
    installpkg puppetmaster
    configure_puppetmaster $controller_hostname $options_elastic_ip
fi

# run puppet to install openstack after removing stale lock (in case Puppet was interrupted)
ps aux | grep -q puppet.agent || sudo rm /var/lib/puppet/state/agent_catalog_run.lock
msg "Installing and configuring: OpenStack"
runcmd puppet agent -t

# puppet agent will return 2 while parsing /etc/nova/nova.conf
# known bug in openstack modules (https://github.com/puppetlabs/puppetlabs-nova/issues/161)
if (($?!=0 && $?!=2)); then
    msg error "Error running Puppet agent. Inspect the log file: $options_logfile"
    msg warn "If the client certificate needs to be signed, run from Puppet master:"
    msg warn "   puppet cert sign $hostname"
    msg warn "Then manually trigger update: \`puppet agent -t'"
    msg "Note that certificate signatures aren't needed if the client has a fully qualified domain name"
    msg "e.g. openstack-compute1.ec2.internal"
fi

# vim: ts=4:sw=4:et

