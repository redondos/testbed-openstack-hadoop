#!/usr/bin/env python
# 2013 Angelo Olivera <aolivera@gmail.com>
#
# Control testbed from command-line
#

import sys, os, time
from boto.vpc import VPCConnection
from optparse import OptionParser
import traceback
from pprint import pprint

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    RED = '\033[00;31m'
    GREEN='\033[00;32m'
    YELLOW='\033[00;33m'

    def disable(self):
        self.HEADER = ''
        self.OKBLUE = ''
        self.OKGREEN = ''
        self.WARNING = ''
        self.FAIL = ''
        self.ENDC = ''

def error(msg, exit=1):
    print bcolors.RED + sys.argv[0] + ": " + msg + bcolors.ENDC
    sys.exit(exit)

def warn(msg):
    print bcolors.YELLOW + sys.argv[0] + ": " + msg + bcolors.ENDC

def info(msg):
    print bcolors.GREEN + sys.argv[0] + ": " + msg + bcolors.ENDC

def msg(msg):
    print msg

def awserror(reason, exit=10):
    error("Could not " + reason + ". Check AWS Console: https://console.aws.amazon.com/vpc/")
    sys.exit(exit)


def main():
    parser = OptionParser(usage="usage: %prog [options] start/stop testbed")

    parser.add_option("-y", "--yes", action="store_true", dest="yes", default=False,
                        help="answer yes to all questions              ")

    (options, args) = parser.parse_args()

    if len(args) != 2:
        parser.print_usage()
        sys.exit(1)

    command = args[0]
    testbed = args[1]

    # Create connection with AWS
    try:
        c = VPCConnection(os.environ['AWS_ACCESS_KEY'], os.environ['AWS_SECRET_KEY'])
    except:
        error("Could not find AWS credentials. Please set environment variables AWS_ACCESS_KEY and AWS_SECRET_KEY.")


    T = {} # testbed settings dictionary
    instances = [] # instances list

    f = open(testbed + "/" + testbed + ".desc", "r")
    while True:
        line = f.readline()
        if not line: break
        key, value = line.strip().split("=")
        T[key] = value
        if key.startswith("controller") or key.startswith("compute"):
            if key.endswith(".id"):
                instances.append(value)

    # pprint(T)
        
    if command == "start":
        c.start_instances(instances)
    elif command == "stop":
        c.stop_instances(instances)
    elif command == "terminate":
        answer = raw_input("Are you sure? (y/N) ")
        if answer.lower() == "y" or answer.lower() == "yes":
            warn("Terminating instances: " + " ".join(instances))
            c.terminate_instances(instances)
        else:
            warn("Cancelling")
    elif command == "describe":
        j = 0
        for i in instances:
            if j == 0:
                print testbed + "-controller"
                print "=" * (len(testbed) + 11)
            else:
                print testbed + "-compute" + str(j)
                print "=" * (len(testbed) + 9)
            print "{u'" + "instance" + "': '" + i + "'}"
            print c.get_instance_attribute(i, "instanceType")
            print c.get_instance_attribute(i, "kernel")
            print c.get_instance_attribute(i, "rootDeviceName")
            print ""
            j += 1
    else:
        parser.print_usage()
        error("Unknown command: " + command)


if __name__ == "__main__":
    main()
