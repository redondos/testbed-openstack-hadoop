#!/usr/bin/env python
# 2013 Angelo Olivera <aolivera@gmail.com>
#
# Control testbed from command-line
#

import sys, os, time, subprocess, shutil
from boto.vpc import VPCConnection
from optparse import OptionParser
import traceback
from pprint import pprint

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    RED = '\033[00;31m'
    GREEN='\033[00;32m'
    YELLOW='\033[00;33m'

    def disable(self):
        self.HEADER = ''
        self.OKBLUE = ''
        self.OKGREEN = ''
        self.WARNING = ''
        self.FAIL = ''
        self.ENDC = ''

def error(msg, exit=1):
    print bcolors.RED + sys.argv[0] + ": " + msg + bcolors.ENDC
    sys.exit(exit)

def warn(msg):
    print bcolors.YELLOW + sys.argv[0] + ": " + msg + bcolors.ENDC

def info(msg):
    print bcolors.GREEN + sys.argv[0] + ": " + msg + bcolors.ENDC

def msg(msg):
    print msg

def awserror(reason, exit=10):
    error("Could not " + reason + ". Check AWS Console: https://console.aws.amazon.com/vpc/")
    sys.exit(exit)

def create_aws_testbed(testbed, options):
    cmdline = ["/usr/bin/env", "python", "aws-setup", testbed]
    cmdline += ["-k", options.ssh_key, "-s", options.subnet, "-n", str(options.instances), "-f", options.flavor]
    if options.surface: cmdline += ["--surface"]
    cmdline.append("-y")
    return subprocess.call(cmdline)

def configure_testbed(testbed, options):
    cmdline = ["/usr/bin/env", "bash", "node-setup", testbed]
    if options.verbose: cmdline.append("-v")
    return subprocess.call(cmdline)

def parse_desc(testbed):
    T = {} # testbed settings dictionary
    instances = [] # instances list
    filename = testbed + "/" + testbed + ".desc"
    try:
        f = open(filename, "r")
    except:
        error("Could not find testbed " + testbed)
    while True:
        line = f.readline()
        if not line: break
        key, value = line.strip().split("=")
        T[key] = value
        if key.startswith("controller") or key.startswith("compute"):
            if key.endswith(".id"):
                instances.append(value)
    f.close()
    return T, instances

def wait_instance(connection, instance):
    i = 0
    while True:
        i += 1
        time.sleep(1)
        try:
            if connection.get_all_instances([instance]):
                break
        except:
            if i >= 10:
                error("Error creating instance ({}). Check AWS control panel.".format(instance))

def main():
    parser = OptionParser(usage="usage: %prog [options] start|stop|status|destroy|list|describe|create|configure|ssh testbed")

    parser.add_option("-y", "--yes", action="store_true", dest="yes", default=False,
                        help="answer yes to all questions              ")

    parser.add_option("-v", "--verbose", action="store_true", dest="verbose", default=False,
                        help="display verbose progress              ")

    parser.add_option("-s", "--subnet", dest="subnet", default="10.0.0.0/24", metavar="SUBNET",
                        help="subnet to use for Amazon VPC, in CIDR notation  "
                        '       default: "10.0.0.0/24"')

    parser.add_option("-k", "--key", dest="ssh_key", default="openstack", metavar="KEY",
                        help="name of ssh key. it will be created if not nonexistent    "
                        '       default: "openstack"' )

    parser.add_option("-f", "--flavor", dest="flavor", default="m1.medium", metavar="FLAVOR",
                        help="instance type: t1.micro, m1.small, m3.xlarge, etc. "
                        '       default: "m1.medium"' )

    parser.add_option("-n", "--instances", dest="instances", default=2, metavar="INSTANCES",
                        help="number of instances to spawn.                 "
                        "       if set to 1, a single node setup will be used."
                        "       default: 2")

    parser.add_option("--surface", action="store_true", dest="surface", default=False,
                        help="create a surface attack node              ")

    (options, args) = parser.parse_args()

    if not len(args):
        parser.print_usage()
        sys.exit(1)

    command = args.pop(0)

    # Create connection with AWS
    try:
        c = VPCConnection(os.environ['AWS_ACCESS_KEY'], os.environ['AWS_SECRET_KEY'])
    except:
        error("Could not find AWS credentials. Please set environment variables AWS_ACCESS_KEY and AWS_SECRET_KEY.")

    if command == "list":
        for dir in os.listdir(os.getcwd()):
            if os.path.exists(dir + "/" + dir + ".desc"):
                print dir
        sys.exit(0)

    elif command == "help":
        parser.print_help()
        sys.exit(0)

    # find testbed name in command-line arguments
    if not len(args):
        parser.print_usage()
        sys.exit(1)
    testbed = args.pop(0)

    if command == "create":
        ret = create_aws_testbed(testbed, options)
        if ret:
            sys.exit(ret)
        else:
            sys.exit(configure_testbed(testbed, options))

    # read testbed description file into vars
    T, instances = parse_desc(testbed)

    if command == "start":
        info("Starting all instances in testbed " + testbed)
        try:
            c.start_instances(instances)
        except:
            error(traceback.format_exc().split('\n')[-2])

    elif command == "stop":
        info("Stopping all instances in testbed " + testbed)
        try:
            c.stop_instances(instances)
        except:
            error(traceback.format_exc().split('\n')[-2])

    elif command == "destroy":
        answer = raw_input("Are you sure? (y/N) ")
        if answer.lower() == "y" or answer.lower() == "yes":
            warn("Terminating instances: " + " ".join(instances))
            try:
                c.terminate_instances(instances)
            except:
                error(traceback.format_exc().split('\n')[-2])

            answer = raw_input("Remove testbed directory? (containing log files, description file, ssh key) (y/N) ")
            if answer.lower() == "y" or answer.lower() == "yes":
                shutil.rmtree(testbed)
                warn("Removed " + testbed)

        else:
            warn("Cancelling")

    elif command == "status":
        j = 0
        for testbed_instance in instances:
            if j == 0:
                out = testbed + "-controller:\t"
            else:
                out = testbed + "-compute" + str(j) + ":  \t"
            j += 1
            try:
                reservation = c.get_all_instances(testbed_instance)
                out += reservation[0].instances[0].state
            except:
                out += "fail"
            print out

    elif command == "describe":
        j = 0
        print "testbed description"
        print "=" * 19
        print "name:      \t" + testbed
        print "elastic_ip:\t" + T["elastic_ip"]
        print "horizon:   \t" + "http://" + T["elastic_ip"] + "/horizon"
        print ""
        for testbed_instance in instances:
            if j == 0:
                name = "controller"
                print name
                print "=" * 10
            else:
                name = "compute" + str(j)
                print name
                print "=" * 8
            print "instance:      \t" + testbed_instance
            print "internal ip:   \t" + T[name + ".private_ip"]
            for attribute in ["instanceType", "kernel", "rootDeviceName"]:
                try:
                    for key, value in c.get_instance_attribute(testbed_instance, attribute).viewitems():
                        print key + ":" + " "*(14-len(key)) + "\t" + value
                except:
                    None
            j += 1
            print ""

    elif command == "ssh":
        keyfile = testbed + "/" + T["ssh_key"] + ".pem"
        subprocess.call("ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i " + keyfile + " ubuntu@" + T["elastic_ip"], shell=True)

    elif command == "configure":
        configure_testbed(testbed, options)

    elif command == "surface":
        if not "surface.id" in T:
            answer = raw_input("Surface node not found. Create (Y/n) ")
            if answer.lower() == "n" or answer.lower() == "no":
                warn("Aborting...")
                sys.exit(0)

            try:
                surface_reservation = c.run_instances('ami-3d4ff254', subnet_id=T["subnet.id"], key_name=T["ssh_key"], instance_type="t1.micro")
            except:
                print traceback.format_exc().split('\n')[-2]
                error("Could not create surface attack instance")

            surface = surface_reservation.instances[0]
            wait_instance(c, surface.id)
            info("Created surface attack instance: " +  surface.id)

            tags = {}
            tags["Name"] = testbed + "-surface"
            c.create_tags([surface.id], tags)

            f = open(testbed + "/" + testbed + ".desc", "a")
            f.write("surface.id=" + surface.id + "\n")
            f.write("surface.private_ip=" + surface.private_ip_address + "\n")
            f.close()

        T = {}
        T, instances = parse_desc(testbed)

        if "surface.id" in T:
            keyfile = testbed + "/" + T["ssh_key"] + ".pem"
            ssh_opts = ["-o", "UserKnownHostsFile=/dev/null", "-o", "StrictHostKeyChecking=no", "-i", keyfile]
            host = "ubuntu@" + T["elastic_ip"]
            # subprocess.call(["ssh"] + ssh_opts + [host, "surface-attack", T["ssh_key"], T["surface.private_ip"], T["subnet.cidr_block"]])
            subprocess.call(["ssh"] + ssh_opts + [host, "/home/ubuntu/surface-attack", testbed, T["ssh_key"], T["controller.private_ip"], T["surface.private_ip"], T["subnet.cidr_block"]])
            subprocess.call(["ssh"] + ssh_opts + [host, "hostname"])
            surfacedir = testbed + "/surface"
            try:
                subprocess.os("mkdir " + surfacedir)
            except:
                None
            subprocess.call(["scp"] + ssh_opts + [host + ":*nmap*", surfacedir])
            subprocess.call(["scp"] + ssh_opts + [host + ":*xml", surfacedir])
    else:
        parser.print_usage()
        error("Unknown command: " + command)

if __name__ == "__main__":
    main()
