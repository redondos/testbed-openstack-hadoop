#!/usr/bin/env python
# 2013 Angelo Olivera <aolivera@gmail.com>
#
# Control testbed from command-line
#

import sys, os, time, subprocess
from boto.vpc import VPCConnection
from optparse import OptionParser
import traceback
from pprint import pprint

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    RED = '\033[00;31m'
    GREEN='\033[00;32m'
    YELLOW='\033[00;33m'

    def disable(self):
        self.HEADER = ''
        self.OKBLUE = ''
        self.OKGREEN = ''
        self.WARNING = ''
        self.FAIL = ''
        self.ENDC = ''

def error(msg, exit=1):
    print bcolors.RED + sys.argv[0] + ": " + msg + bcolors.ENDC
    sys.exit(exit)

def warn(msg):
    print bcolors.YELLOW + sys.argv[0] + ": " + msg + bcolors.ENDC

def info(msg):
    print bcolors.GREEN + sys.argv[0] + ": " + msg + bcolors.ENDC

def msg(msg):
    print msg

def awserror(reason, exit=10):
    error("Could not " + reason + ". Check AWS Console: https://console.aws.amazon.com/vpc/")
    sys.exit(exit)

def configure_testbed(testbed, args=None):
    print args
    sys.exit(0)
    cmdline = [os.getcwd() + "/node-setup", testbed]
    if options.verbose: cmdline.append("-v")
    subprocess.call(cmdline)

def main():
    parser = OptionParser(usage="usage: %prog [options] list|start|stop|status|describe|configure|ssh testbed")

    parser.add_option("-y", "--yes", action="store_true", dest="yes", default=False,
                        help="answer yes to all questions              ")

    parser.add_option("-v", "--verbose", action="store_true", dest="verbose", default=False,
                        help="display verbose progress              ")

    (options, args) = parser.parse_args()

    if not len(args):
        parser.print_usage()
        sys.exit(1)

    command = args.pop(0)

    if command != "list":

        if not len(args):
            parser.print_usage()
            sys.exit(1)

        testbed = args.pop(0)

        T = {} # testbed settings dictionary
        instances = [] # instances list
        filename = testbed + "/" + testbed + ".desc"
        try:
            f = open(filename, "r")
        except:
            error("Could not find testbed " + testbed)
        while True:
            line = f.readline()
            if not line: break
            key, value = line.strip().split("=")
            T[key] = value
            if key.startswith("controller") or key.startswith("compute"):
                if key.endswith(".id"):
                    instances.append(value)

        # Create connection with AWS
        try:
            c = VPCConnection(os.environ['AWS_ACCESS_KEY'], os.environ['AWS_SECRET_KEY'])
        except:
            error("Could not find AWS credentials. Please set environment variables AWS_ACCESS_KEY and AWS_SECRET_KEY.")

    if command == "start":
        info("Starting all instances in testbed " + testbed)
        try:
            c.start_instances(instances)
        except:
            error(traceback.format_exc().split('\n')[-2])

    elif command == "stop":
        info("Stopping all instances in testbed " + testbed)
        try:
            c.stop_instances(instances)
        except:
            error(traceback.format_exc().split('\n')[-2])

    elif command == "terminate":
        answer = raw_input("Are you sure? (y/N) ")
        if answer.lower() == "y" or answer.lower() == "yes":
            warn("Terminating instances: " + " ".join(instances))
            try:
                c.terminate_instances(instances)
            except:
                error(traceback.format_exc().split('\n')[-2])
        else:
            warn("Cancelling")

    elif command == "status":
        j = 0
        for testbed_instance in instances:
            for reservation in c.get_all_instances(testbed_instance):
                if j == 0:
                    print testbed + "-controller:\t" + reservation.instances[0].state
                else:
                    print testbed + "-compute" + str(j) + ":  \t" + reservation.instances[0].state
                j += 1

    elif command == "describe":
        j = 0
        print "testbed description"
        print "=" * 19
        print "name:      \t" + testbed
        print "elastic_ip:   \t" + T["elastic_ip"]
        print ""
        for testbed_instance in instances:
            if j == 0:
                name = "controller"
                print name
                print "=" * 10
            else:
                name = "compute" + str(j)
                print name
                print "=" * 8
            print "instance:      \t" + testbed_instance
            print "internal ip:   \t" + T[name + ".private_ip"]
            for attribute in ["instanceType", "kernel", "rootDeviceName"]:
                for key, value in c.get_instance_attribute(testbed_instance, attribute).viewitems():
                    print key + ":" + " "*(14-len(key)) + "\t" + value
            j += 1
            print ""

    elif command == "ssh":
        keyfile = testbed + "/" + T["ssh_key"] + ".pem"
        subprocess.call("ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i " + keyfile + " ubuntu@" + T["elastic_ip"], shell=True)

    elif command == "configure":
        configure_testbed(testbed, args)

    elif command == "list":
        for dir in os.listdir(os.getcwd()):
            if os.path.exists(dir + "/" + dir + ".desc"):
                print dir

    else:
        parser.print_usage()
        error("Unknown command: " + command)

if __name__ == "__main__":
    main()
